#include <stdio.h>
#include <math.h>



typedef struct Point { 
    float x, y, z; 
} Point;

void catmull(Point *p, int i);

int main() {
    Point p1[9];
    p1[0].x = 0.0; p1[0].y = 0.0; p1[0].z = 0.0;
    p1[1].x = 1.0; p1[1].y = 1.0; p1[1].z = 1.0;
    p1[2].x = 2.0; p1[2].y = 2.0; p1[2].z = 2.0;
    p1[3].x = 3.0; p1[3].y = 3.0; p1[3].z = 3.0;
    p1[4].x = 4.0; p1[4].y = 4.0; p1[4].z = 4.0;
    p1[5].x = 5.0; p1[5].y = 5.0; p1[5].z = 5.0;
    p1[6].x = 6.0; p1[6].y = 6.0; p1[6].z = 6.0;
    p1[7].x = 7.0; p1[7].y = 7.0; p1[7].z = 7.0;
    p1[8].x = 8.0; p1[8].y = 8.0; p1[8].z = 8.0;


    catmull (p1, 9);

  
}

void catmull(Point *p, int i){
    int u = 1, v = 2, w = 3;
    float x,y,z;
    float j[i];
    for(int k = 0; k<i; k++){
        if (u > i-1) u = 0;
        if (v >i-1) v = 0;
        if (w >i-1) w = 0;
        //if(k != i-2){    
            for (float t = 0.0; t < 1.0; t += 0.1) {
                j[k] = (pow(-t,3)) + (2*(pow(t,2))) - t;
                j[u] = (3*(pow(t,3))) - (5*(pow(t,2))) + 2;
                j[v] = (-3*(pow(t,3))) + (4*(pow(t,2))) + t;
                j[w] = (pow(t,3)) - (pow(t,2));
                x = 0.5*((p[k].x*j[k]) + (p[u].x*j[u]) + (p[v].x*j[v]) + (p[w].x*j[w]));
                y = 0.5*((p[k].y*j[k]) + (p[u].y*j[u]) + (p[v].y*j[v]) + (p[w].y*j[w]));
                z = 0.5*((p[k].z*j[k]) + (p[u].z*j[u]) + (p[v].z*j[v]) + (p[w].z*j[w]));
                if (x <0 && y<0 && z<0){
                    x = x*-1;
                    y = y*-1;
                    z = z*-1;
                    }
            
                //printf("%d %d %d %d\n",k, u, v, w);
                printf("%.4f\t %.4f\t %.4f\n", x,y,z);
            }
 
        //}
        u++; v++;w++;
    }
}