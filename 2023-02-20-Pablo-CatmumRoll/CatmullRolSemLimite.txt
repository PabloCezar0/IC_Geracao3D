#include <stdio.h>
#include <math.h>



typedef struct Point { 
    float x, y, z; 
} Point;

void catmull(Point *p, int i);

int main() {
    Point p1[16];
    p1[0].x = 1.63; p1[0].y = 8.80; p1[0].z = 0.0;
    p1[1].x = 1.54; p1[1].y = 9.02; p1[1].z = 0.0;
    p1[2].x = 1.43; p1[2].y = 9.32; p1[2].z = 0.0;
    p1[3].x = 1.42; p1[3].y = 9.68; p1[3].z = 0.0;
    p1[4].x = 1.55; p1[4].y = 9.90; p1[4].z = 0.0;
    p1[5].x = 1.72; p1[5].y = 9.98; p1[5].z = 0.0;
    p1[6].x = 1.93; p1[6].y = 10.0; p1[6].z = 0.0;
    p1[7].x = 2.10; p1[7].y = 9.97; p1[7].z = 0.0;
    p1[8].x = 2.24; p1[8].y = 9.88; p1[8].z = 0.0;
    p1[9].x = 2.35; p1[9].y = 9.75; p1[9].z = 0.0;
    p1[10].x = 2.38; p1[10].y = 9.57; p1[10].z = 0.0;
    p1[11].x = 2.35; p1[11].y = 9.41; p1[11].z = 0.0;
    p1[12].x = 2.34; p1[12].y = 9.21; p1[12].z = 0.0;
    p1[13].x = 2.28; p1[13].y = 9.05; p1[13].z = 0.0;
    p1[14].x = 2.21; p1[14].y = 8.91; p1[14].z = 0.0;
    p1[15].x = 2.17; p1[15].y = 8.78; p1[15].z = 0.0;
    // p1[16].x = 1.92; p1[16].y = 0.0; p1[16].z = 0.0;
    // p1[17].x = 1.90; p1[17].y = 0.33; p1[17].z = 0.0;
    // p1[18].x = 1.92; p1[18].y = 0.65; p1[18].z = 0.0;
    // p1[19].x = 1.93; p1[19].y = 1.08; p1[19].z = 0.0;
    // p1[20].x = 1.94; p1[20].y = 1.48; p1[20].z = 0.0;
    // p1[21].x = 1.89; p1[21].y = 1.82; p1[21].z = 0.0;
    // p1[22].x = 1.86; p1[22].y = 2.34; p1[22].z = 0.0;
    // p1[23].x = 1.90; p1[23].y = 2.69; p1[23].z = 0.0;
    // p1[24].x = 1.87; p1[24].y = 3.19; p1[24].z = 0.0;  
    // p1[25].x = 1.89; p1[25].y = 3.76; p1[25].z = 0.0;
    // p1[26].x = 1.89; p1[26].y = 4.17; p1[26].z = 0.0;
 





    catmull (p1, 15);

  
}

void catmull(Point *p, int i){
    int u = 1, v = 2, w = 3;
    float x,y,z;
    float j[i];
    for(int k = 0; k<i; k++){
        if (u > i-1) u = 0;
        if (v >i-1) v = 0;
        if (w >i-1) w = 0;
        //if(k != i-2){    
            for (float t = 0.0; t < 1.0; t += 0.1) {
                j[k] = (pow(-t,3)) + (2*(pow(t,2))) - t;
                j[u] = (3*(pow(t,3))) - (5*(pow(t,2))) + 2;
                j[v] = (-3*(pow(t,3))) + (4*(pow(t,2))) + t;
                j[w] = (pow(t,3)) - (pow(t,2));
                x = 0.5*((p[k].x*j[k]) + (p[u].x*j[u]) + (p[v].x*j[v]) + (p[w].x*j[w]));
                y = 0.5*((p[k].y*j[k]) + (p[u].y*j[u]) + (p[v].y*j[v]) + (p[w].y*j[w]));
                z = 0.5*((p[k].z*j[k]) + (p[u].z*j[u]) + (p[v].z*j[v]) + (p[w].z*j[w]));
             
                //printf("%d %d %d %d\n",k, u, v, w);
                printf("%.4f\t %.4f\t %.4f\n", x,y,z);
            }
 
        //}
        u++; v++;w++;
    }
}